// Problem ID: 139. Arithmetic Progression.
//
// Construct the sequence arr[1], arr[2], ... by the following rules.
// 1. For i = 1 we put arr[1] = 1.
// 2. For i >= 2, arr[i] is the least positive integer such that the following two conditions hold
// a. arr[i] > arr[i - 1];
// b. for all k, j < i we have arr[i] is not equal to n1 * arr[k] - n2 * arr[j].
//
// Find the first n terms of this sequence.
//
// Input: The first line contains a single integer T, the number of test cases. T test cases follow. The only line of
// each test case contains three integers n1, n2 and n.
//
// Output: For each test case, output a single line containing the numbers arr[1], arr[2], ..., arr[n] generated by the
// rules given in the problem statement and numbers n1, n2. Separate any two consecutive numbers in a line by a single
// space.
//
// Constraints:
// Time limit = 1 sec
// 1 <= T <= 50
// 1 <= a, b <= 50
// 1 <= n <= 1000
//
// Example
//
// Input:
// 3
// 2 1 10
// 1 1 5
// 4 2 4
//
// Output:
// 1 2 4 5 10 11 13 14 28 29
// 1 2 3 4 5
// 1 3 4 5

package com.jsanghvi.online_problems.geeksforgeeks.medium;

import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class P0139_ArithmeticProgression {
    public static void main(final String[] args) {
        final Scanner in = new Scanner(System.in);
        final int T = in.nextInt();

        for (int test = 0; test < T; test++) {
            printArithmeticProgression(in.nextInt(), in.nextInt(), in.nextInt());
        }
    }

    private static void printArithmeticProgression(final int n1, final int n2, final int length) {
        Set<Integer> ignoreSet = new HashSet<>();
        Set<Integer> progressionSet = new TreeSet<>();

        for (int number = 1, term = 0; term < length; number++) {
            if (ignoreSet.contains(number)) {
                continue;
            }

            System.out.print(number + " ");
            term += 1;
            progressionSet.add(number);

            for (int progression : progressionSet) {
                int result = n1 * number - n2 * progression;
                if (result > number) {
                    ignoreSet.add(result);
                }

                result = n1 * progression - n2 * number;
                if (result > number) {
                    ignoreSet.add(result);
                }
            }
        }

        System.out.println();
    }
}
